#!/usr/bin/perl

use strict;
use warnings;

package App::ei;

use Ei;
use Text::Table;
use Text::ParseWords qw(shellwords);
use Clone qw(clone);
use String::Expando;
use Getopt::Long
    qw(:config posix_default gnu_compat require_order bundling no_ignore_case);

sub usage;
sub fatal;

(my $prog = $0) =~ s{.+/}{};

my %shell;
my $config_file;
GetOptions(
    'c|config-file=s' => \$config_file,
) or usage;

my %arg = (
    'config_file' => $config_file,
    'auto_config' => 1,
    'running' => 1,
);
$arg{'plugin_dir'} = $ENV{'EI_PLUGIN_DIR'} if $ENV{'EI_PLUGIN_DIR'};
my $ei = Ei->new(%arg);
my (%config, @items, %command, %command_source, %hook);
init();

my %outprop = (
    'default' => [
        ['#'        => 'Item'           ],
        ['title'    => 'Title',    ''   ],
        ['location' => 'Location', ''   ],
    ],
);
my $outform = 'default';
my $display = $config{'display'};
if ($display) {
    while (my ($form, $disp) = each %$display) {
        my $cols = $disp->{columns} or next;
        my @outprops;
        foreach (@$cols) {
            my ($prop, $label) = @$_{qw(property label)};
            push @outprops, [ $prop, $label, '' ];
        }
        $outprop{$form} = \@outprops;
    }
}

if (@ARGV == 0) {
    @ARGV = ('shell');
}
elsif ($ARGV[0] =~ m{^\@(.+)$}) {
    splice @ARGV, 0, 1, qw(ls -l), $1;
}
elsif ($ARGV[0] =~ m{^/(.+)/$}) {
    splice @ARGV, 0, 1, qw(grep), $1;
}
elsif ($ARGV[0] =~ m{^[+](.+)}) {
    splice @ARGV, 0, 1, qw(add -p), $1;
}

my $cmd = shift @ARGV;
&{ $command{$cmd} ||= __PACKAGE__->can('cmd_' . $cmd) || usage };

# --- Commands

sub cmd_ls {
    #@ ls [-l LOC] [-p PROTO] :: list items
    my ($l, $p) = @shell{qw(location prototype)};
    GetOptions(
        'l|location=s' => \$l,
        'p|prototype=s' => \$p,
    ) or usage;
    my @items_to_list;
    if ($l) {
        @items_to_list = grep { ($_->{location} // '') eq $l } @items;
    }
    elsif ($p) {
        @items_to_list = grep { ($_->{type} // '') eq $p } @items;
    }
    out( sort byid @items_to_list );
}

sub cmd_add {
    #@ add [-p PROTO] :: add items to the inventory
    my $p = $shell{'prototype'} || 'object';
    my $l = $shell{'location'};
    GetOptions(
        'l|location=s' => \$l,
        'p|prototype=s' => \$p,
    ) or usage;
    usage if @ARGV;
    my $proto = $ei->prototype($p) or fatal "No such prototype: $p";
    my (@objects, $n);
    while (1) {
        print STDERR '-' x 80, "\n";
        my $obj = clone($proto->{properties});
        $obj->{'location'} = $l if defined $l;
        my $continue;
        eval {
            $ei->fill_placeholders($obj);
            push @objects, $obj;
            $n++;
            $continue = ask_bool('Continue?', 1);
        };
        last if !$continue;
    }
    fatal "cancelled" if !$n;
    print STDERR '-' x 80, "\n";
    my $items = $n == 1 ? 'item' : 'items';
    if (ask_bool("Save $n $items?", 1)) {
        $ei->add(@objects);
        $ei->reload, init() if %shell;
    }
}

sub cmd_e { goto &cmd_edit }
    #@= edit

sub cmd_edit {
    #@ edit ITEM :: edit an item
    @ARGV = ($shell{'item'}) if !@ARGV && $shell{'item'};
    usage if @ARGV < 1;
    my $id = shift @ARGV;
    my @items_to_edit = grep { $_->{'#'} eq $id } @items;
    fatal "no such item(s): @ARGV" if !@items_to_edit;
    system($ENV{'VISUAL'}||$ENV{'EDITOR'}||'vi', "+$_->{'.'}", $_->{'/'}) for $items_to_edit[0];
    if (%shell) {
        $ei->reload, init();
        $shell{'item'} = $id;
    }
}

sub cmd_item {
    #@ item ITEM :: list a single item
    usage if @ARGV < 1;
    my $i = shift @ARGV;
    out( grep { $_->{'#'} eq $i } @items );
}

sub cmd_grep {
    #@ grep PATTERN :: list items that match the given pattern
    usage if @ARGV < 1;
    my $patt = shift @ARGV;
    my $rx = qr/$patt/i;
    out( grep { match(sub { $_ =~ $rx }) } @items );
    #out( grep { 0 < grep { $_ =~ $rx } values %$_ } @items );
}

sub cmd_batch {
    #@ batch [-l LOC] [-f INF] [-O] [-o OUTF] :: add a batch of items
    my $in_file = '-';
    my $location = $shell{'location'} || 'home';
    my ($out_file);
    GetOptions(
        'f|file=s' => \$in_file,
        'o|output=s' => \$out_file,
        'O' => sub { $out_file = '-' },  # Print to stdout
        'l|location=s' => \$location,
    ) or usage;
    if (defined $in_file && $in_file ne '-' && $in_file ne '/dev/stdin') {
        open \*STDIN, '<', $in_file or fatal "open $in_file for input: $!";
    }
    if (defined $out_file && $out_file ne '-' && $out_file ne '/dev/stdout') {
        open \*STDOUT, '>>', $out_file or fatal "open $out_file for output: $!";
    }
    elsif (!defined $out_file) {
        my $save_file = $config{files}{save};
        $save_file = $config{files}{root} . '/' . $save_file if $save_file !~ m{^/};
        open \*STDOUT, '>>', scalar glob($save_file) or fatal "Can't save to $save_file: $!";
    }
    my %proto;
    while (<STDIN>) {
        if (/^add\s+(\S+)\s+\{$/) {
            my $p = $1;
            my $proto = $proto{$p} ||= $ei->prototype($p) || fatal "No such prototype: $p";
            my $hash = $ei->_read_hash(\*STDIN, '-', $.);
            my $obj = clone({ %{$proto->{properties}}, %$hash });
            $ei->fill_placeholders($obj,
                '*' => sub {
                    my ($key, $setter, @args) = @_;
                    $setter->(undef);
                },
            );
            $obj->{location} //= $location;
            foreach (keys %$obj) {
                delete $obj->{$_} if !defined $obj->{$_};
            }
            $ei->write(\*STDOUT, $obj);
        }
        elsif (/^delete\s+(\S+)$/) {
            fatal "delete not yet implemented";
        }
        elsif (/^update\s+(\S+)\s+\{$/) {
            fatal "update not yet implemented";
        }
    }
}

sub cmd_proto {
    #@ proto [PROTO] :: list (a) prototype(s)
    if (!@ARGV) {
        print $_, "\n" for sort $ei->prototypes;
        return;
    }
    foreach my $p (@ARGV) {
        my $proto = $ei->prototype($p) or fatal "No such prototype: $p";
        1;
    }
}

sub cmd_export {
    #@ export [-t TYPE] [-l LOC] :: export item data
    my $l = $shell{'location'};
    my $t = 'native';
    GetOptions(
        'l|location=s' => \$l,
        't|format=s' => \$t,
    ) or usage;
    my @items_to_export = @items;
    if ($l) {
        usage if @ARGV;
        @items_to_export = grep { ($_->{location} // '') eq $l } @items_to_export;
    }
    elsif (@ARGV) {
        my %want = map { $_ => 1 } @ARGV;
        @items_to_export = grep { $want{$_->{'#'}} } @items_to_export;
    }
    foreach (@items_to_export) {
        print_item($_, $t);
    }
}

sub print_item {
    my ($item, $format) = @_;
    my $formatter = __PACKAGE__->can('as_'.lc($format // $shell{'format'} // 'native'))
        or fatal "unknown format: $format";
    my %item = %$item;
    $item{'id'}   ||= delete $item{'#'};
    $item{'file'} ||= delete $item{'/'};
    $item{'line'} ||= delete $item{'.'};
    print $formatter->(\%item);
}

sub cmd_help {
    #@ help :: show helpful information
    my $pfx = %shell ? '' : 'ei [-c CONFIGFILE] ';
    print STDERR <<"EOS";
usage: ${pfx}COMMAND [ARG...]
commands:
EOS
    my $w = 0;
    my ($commands, $aliases) = commands();
    my $table = Text::Table->new(\'  ', 'command', \'  ', 'description');
    foreach (sort { $a->{'name'} cmp $b->{'name'} } @$commands) {
        my ($name, $args, $descrip) = @$_{qw(name args description)};
        $table->add(join(' ', $name, @{ $args || [] }), $descrip || '');
    }
    print $table->body;
    $table = Text::Table->new(\'  ', 'alias', \' = ', 'command');
    print "aliases:\n";
    foreach (sort keys %$aliases) {
        $table->add($_, $aliases->{$_});
    }
    print $table->body;
}

sub cmd_shell {
    #@ shell :: run an interactive command shell
    init_shell();
    compile_prompt($shell{'prompt'});
    print STDERR $shell{'prompter'}->();
    while (<STDIN>) {
        next if /^\s*(?:#.*)?$/;  # Skip blank lines and comments
        chomp;
        if (s/^!\s*//) {
            system($ENV{'SHELL'} || 'sh', '-c', $_);
            next;
        }
        elsif (/^{(.+)}$/) {
            eval $1;
            next;
        }
        else {
            s{^\@(.+)$}{ls -l $1}
                or
            s{^/(.+)/$}{grep $1}
                or
            s{^[+](.+)}}{add -p $1}
        }
        local @ARGV = shellwords($_);
        my $cmd = shift @ARGV;
        $cmd =~ tr/-/_/;
        if ($shell{'aliases'}{$cmd}) {
            $cmd = $shell{'aliases'}{$cmd};
            if (ref $cmd) {
                ($cmd, @ARGV) = (@$cmd, @ARGV);
            }
        }
        my $sub = __PACKAGE__->can("shellcmd_$cmd")
               || __PACKAGE__->can("cmd_$cmd");
        if (!$sub) {
            print "unrecognized command: $cmd\nenter 'help' for a list\n";
            next;
        }
        eval {
            $shell{'cmd'} = $cmd;
            $sub->();
        };
        last if !$shell{'running'};
    }
    continue {
        print STDERR $shell{'prompter'}->();
    }
}

# --- Shell commands

sub shellcmd_goto {
    #@ goto LOC :: go to the given location
    usage if @ARGV != 1;
    my ($loc) = @ARGV;
    print STDERR "empty location: $loc\n" if !exists $shell{'locations'}{$loc};
    $shell{'location'} = $loc;
}

sub shellcmd_quit {
    #@ quit :: exit the shell
    CORE::exit;
}

sub shellcmd_proto {
    #@ proto [PROTOTYPE] :: use PROTOTYPE when creating new objects, or list all prototypes
    if (!@ARGV) {
        print $_, "\n" for sort $ei->prototypes;
        return;
    }
    $shell{'prototype'} = shift @ARGV;
}

sub shellcmd_view {
    #@ view [ITEM] :: print data for ITEM (or current item)
    usage if @ARGV > 1;
    my $id = @ARGV ? shift @ARGV : $shell{'item'};
    fatal "no current item" if !$id;
    my ($item) = grep { $_->{'#'} eq $id } @items;
    fatal "no such item: $id" if !$item;
    $shell{'item'} = $id;
    print_item($item);
}

sub shellcmd_format {
    #@ format FMT :: set export format to FMT
    if (@ARGV != 1) {
        print $shell{'format'} ||= 'native', "\n";
    }
    else {
        my $format = shift @ARGV;
        usage if !__PACKAGE__->can('as_'.$format);
        $shell{'format'} = $format;
    }
}

sub cmd_locations {
    #@ locations :: print all locations
    my $locations = $ei->locations;
    my $table = Text::Table->new('key', 'value');
    foreach my $l (sort keys %$locations) {
        $table->add($l, $locations->{$l}{'title'});
    }
    print $table->body;
}

sub cmd_config {
    #@ config [-r] :: print ei config settings
    my ($recurse, $strict);
    GetOptions(
        'r|recurse' => \$recurse,
        's|strict' => \$strict,
    ) or usage;
    eval "use Hash::Flatten qw(flatten); 1" or fatal "flattened export not available";
    my $flat = flatten($ei->{'config'});
    my @keys;
    if ($recurse) {
        @keys = map {
            my $pfx = $_ . '.';
            my @k = grep { index($_, $pfx) == 0 } keys %$flat;
            fatal "no config variables under $_" if $strict && !@k;
            @k;
        } @ARGV;
    }
    else {
        @keys = @ARGV ? @ARGV : keys %$flat;
    }
    foreach my $k (sort @keys) {
        my $v = $flat->{$k};
        if (!defined $v) {
            fatal "no such config variable: $k" if $strict;
        }
        elsif ($recurse || !@ARGV) {
            print $k, ' ', $v, "\n";
        }
        else {
            print $v, "\n";
        }
    }
}

# --- Other functions

sub init {
    @items = $ei->items;
    %config = %{ $ei->{config} };
    init_hooks();
    init_plugins();
}

sub init_shell {
    %shell = (
        'running' => 1,
        'prompt' => 'ei(%(location))> ',
        %{ $config{'shell'} ||= {} },
    );
    {
        no strict 'refs';
        no warnings 'redefine';
        *exit = sub {
            die;  # Abort current command
        };
    }
    $shell{'items'} = \@items;
    $shell{'locations'} = $ei->{'config'}{'locations'};
    my %contents;
    foreach my $item (@items) {
        push @{ $contents{$item->{'location'} || ''} ||= [] }, $item;
    }
    $shell{'contents'} = \%contents;
    $shell{'aliases'}{'q'} ||= 'quit';
}

sub as_native {
    my ($item) = @_;
    return $ei->serialize($item), "\n";
}

sub as_yaml {
    my ($item) = @_;
    eval "use YAML qw(); 1" or fatal "YAML export not available";
    return YAML::Dump($item);
}

sub as_flat {
    my ($item) = @_;
    eval "use Hash::Flatten qw(flatten); 1" or fatal "flattened export not available";
    my $flat = flatten($item);
    my $table = Text::Table->new('key', {'title' => 'value', 'align' => 'left'});
    foreach (sort keys %$flat) {
        $table->add($_, $flat->{$_});
    }
    return $table->body, "\n";
}

sub as_kv {
    my ($item) = @_;
    eval "use Hash::Flatten qw(flatten); 1" or fatal "flattened export not available";
    my $flat = flatten($item);
    my $str = '';
    foreach (sort keys %$flat) {
        $str .= $_ . '=' . $flat->{$_} . "\n";
    }
    return $str, "\n";
}

sub byid {
    my ($aa, $an) = ($a->{'#'} =~ /^([a-z]*)([0-9]*)/);
    my ($ba, $bn) = ($b->{'#'} =~ /^([a-z]*)([0-9]*)/);
    return $aa cmp $ba || $an <=> $bn;
}

sub match {
    my ($cond) = @_;
    my %ref2code = (
        '' => sub {
            my ($c) = @_;
            return $c->();
        },
        'HASH' => sub {
            foreach (values %$_) {
                return 1 if match(@_);
            }
        },
        'ARRAY' => sub {
            foreach (@$_) {
                return 1 if match(@_);
            }
        },
    );
    return $ref2code{ref $_}->($cond);
    #return $cond->() if !ref;
    #return match_hash($cond, $_) if $r eq 'HASH';
}

sub out {
    return if !@_;
    my (@fld, @col, @def);
    foreach (@{ $outprop{$outform} }) {
        push @fld, $_->[0];
        push @col, \'  ' if @col;
        push @col, $_->[1];
        push @def, (@$_ > 2 ? $_->[2] : undef);
    }
    my $table = Text::Table->new(@col);
    foreach my $item (@_) {
        my @row;
        foreach my $i (0..$#fld) {
            my ($f, $d) = ($fld[$i], $def[$i]);
            push @row, $item->{$f} // $d // die "No default $f for item $item->{'#'}";
        }
        $table->add(@row);
    }
    print $table->title, $table->rule(sub { '-' x $_[1] }, sub { '' }), $table->body;
    ### printf "%5s %-12.12s %s\n", 'Item', 'Location', 'Description';
    ### foreach (@_) {
    ###     printf "%5d %-12.12s %s\n", $_->{'#'} // 0, $_->{'loc'} // '', $_->{'descrip'} // '';
    ### }
}

sub usage {
    my @msg = @_ ? @_ : ('[-c CONFIGFILE] COMMAND [OPTION]...');
    print STDERR "usage: $prog ", @msg, "\n";
    CORE::exit(1);
}

sub fatal {
    print STDERR "${prog}: @_\n";
    CORE::exit(2);
}

sub exit {
    CORE::exit(@_);
}

sub commands {
    open my $fh, '<', $0 or die "open $0: $!";
    my (@commands, %alias);
COMMAND:
    while (<$fh>) {
        next if !/^sub (shell)?cmd_(\w+) {/;
        next if defined $1 && !$shell{'running'};
        my $name = $2;
        my %cmd = ('name' => $name);
        while (<$fh>) {
            $alias{$name} = $1, next COMMAND if /^\s*#\@=\s*(\w+)/;
            last if !/^\s*#\@ (\w+(?:\s+(.+))?) :: (.+)/;
            my ($args, $descrip) = ($2, $3);
            $cmd{'args'} = [ shellwords($args) ],
            $cmd{'description'} = $3;
        }
        push @commands, \%cmd;
    }
    $alias{'/PATT/'} = 'grep PATT';
    $alias{'@LOC'}   = 'ls -l LOC';
    return (\@commands, \%alias);
}

sub compile_prompt {
    my ($prompt) = @_;
    my %unesc = (
        '\e' => "\e",
        '\n' => "\n",
        '\r' => "\r",
        '\t' => "\t",
        '\\' => "\\",
    );
    $prompt =~ s/(\\[\\entr])/$unesc{$1}/g;
    $shell{'prompt'} = $prompt;
    my $prompt_expando = String::Expando->new;
    return $shell{'prompter'} = sub {
        $prompt_expando->expand($prompt, {
            'location' => $shell{'location'},
        });
    }
}

sub ask_bool {
    my ($prompt, $default) = @_;
    print STDERR $prompt, ($default ? ' [Yn] ' : ' [yN] ');
    my $ans = <STDIN>;
    return 1 if $ans =~ /^[Yy]/;
    return 0 if $ans =~ /^[Nn]/;
    return $default;
}

sub init_hooks {
    my $hash = eval('\%' . __PACKAGE__ . '::');
    foreach my $k (keys %$hash) {
        next if $k !~ s/^hook_//;
        $hook{$k} = $hash->{$k};
    }
}

sub init_plugins {
    foreach my $plugin (sort { $a->{'name'} cmp $b->{'name'} } values %{ $ei->plugins }) {
        my $instance = $plugin->{'instance'};
        my %c = eval { $instance->commands };
        my %h = eval { $instance->hooks };
        $plugin->{'commands'} = \%c;
        $plugin->{'hooks'} = \%h;
        my $name = $plugin->{'name'};
        my $file = $plugin->{'file'};
        while (my ($cmd, $sub) = each %c) {
            die "plugin $name provides command $cmd but it is already provided"
                if exists $command{$cmd};
            $command{$cmd} = sub { $sub->($instance) };
            $command_source{$cmd} = ['plugin', $name, $file];
        }
        while (my ($hook, $sub) = each %h) {
            die "plugin $name provides hook $hook but it is already provided"
                if exists $hook{$hook};
            $hook{$hook} = sub { $sub->($instance) };
        }
    }
}

